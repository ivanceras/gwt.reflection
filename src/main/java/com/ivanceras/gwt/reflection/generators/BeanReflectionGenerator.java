package com.ivanceras.gwt.reflection.generators;

import java.lang.reflect.Method;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map.Entry;
import java.util.Set;

import com.ivanceras.commons.conf.Configuration;
import com.ivanceras.commons.strings.CStringUtils;
import com.ivanceras.commons.writer.FileUtil;
import com.ivanceras.commons.writer.SourceWriter;
import com.ivanceras.commons.writer.StringSourceWriter;

public class BeanReflectionGenerator {

	@SuppressWarnings("rawtypes") 
	public void start(Class clazz, Configuration conf) {
		HashMap<String, Class> attribtutesDataType = extractMeta(clazz);

		SourceWriter sw = new StringSourceWriter();
		
		Set<Class> imports = new HashSet<Class>();
		for(Entry<String, Class> entry : attribtutesDataType.entrySet()){
			Class attClazz = entry.getValue();
			imports.add(attClazz);
		}
		imports.add(clazz);
		imports.add(Date.class);
		
		sw.println("package "+conf.bopackageName+".reflection;");
		sw.println();
		sw.lnprint("");
		sw.lnprint("/***");
		sw.lnprint("* This is automatically generated by "+getClass().getCanonicalName()+", based on the Class files");
		sw.lnprint("* ");
		sw.lnprint("* ");
		sw.lnprint("*/");
		sw.println();
		for(Class imp : imports){
			sw.println("import "+imp.getCanonicalName().replace("[]", "")+";");
		}
		sw.println();
		String clazzName = clazz.getSimpleName()+"Reflect";
		sw.println();
		sw.println("public class "+clazzName+"{");
		sw.println();
		for(Entry<String, Class> adt : attribtutesDataType.entrySet()){
			String attribute = adt.getKey();
			sw.println("\tfinal static String "+attribute+" = \""+attribute+"\";");
		}
		sw.println();
		
		/**
		 * refelction for get value
		 */
		sw.println("\tpublic static Object getValue("+clazz.getSimpleName()+" instance_, String property_){");
		sw.println("\t\tswitch(property_){");
		for(Entry<String, Class> adt : attribtutesDataType.entrySet()){
			String attribute = adt.getKey();
			String attMethod = CStringUtils.capitalize(attribute);
			sw.println("\t\tcase "+attribute+":");
			sw.println("\t\t\treturn instance_.get"+attMethod+"();");
		}
		sw.println("\t\t}");
		sw.println("\t\treturn null;");
		sw.println("\t}");
		sw.println();
		sw.println();
		/**
		 * refelction for set value
		 */
		sw.println("\tpublic static void setValue("+clazz.getSimpleName()+" instance_, String property_, Object value_){");
		sw.println("\t\tswitch(property_){");
		for(Entry<String, Class> adt : attribtutesDataType.entrySet()){
			String attribute = adt.getKey();
			String attMethod = CStringUtils.capitalize(attribute);
			Class dataType = adt.getValue();
			sw.println("\t\tcase "+attribute+":");
			sw.println("\t\t\tinstance_.set"+attMethod+"(("+dataType.getSimpleName()+")value_);");
			sw.println("\t\t\tbreak;");
		}
		sw.println("\t\t}");
		sw.println("\t}");
		sw.println();
		sw.println();
		
		sw.println("");
		sw.println("\tpublic static String[] getModelFields(){");
		sw.println("\t\treturn new String[]{");
		boolean doComma = false;
		for(Entry<String, Class> adt : attribtutesDataType.entrySet()){
			String attribute = adt.getKey();
			if(doComma){sw.println(",");}else{doComma=true;}
			sw.print("\t\t\t"+attribute+"");
		}
		sw.println();
		sw.println("\t\t};");
		sw.println("\t}");
		
		
		/**
		 * get datatypes
		 * 
		 */
		sw.println("");
		sw.println("\tpublic static Class<?>[] getFieldDataTypes(){");
		sw.println("\t\treturn new Class[]{");
		boolean doCommaDataTypes = false;
		for(Entry<String, Class> adt : attribtutesDataType.entrySet()){
			Class dataTypeClazz = adt.getValue();
			if(doCommaDataTypes){sw.println(",");}else{doCommaDataTypes=true;}
			sw.print("\t\t\t"+dataTypeClazz.getSimpleName().replace("[]", "")+".class");
		}
		sw.println();
		sw.println("\t\t};");
		sw.println("\t}");
		
		sw.println("}");
		FileUtil.writeToFile(sw.toString(), conf.bodirectory+"/reflection/", clazzName+".java");
	}

	/**
	 * Meta is extracted only from their Getters
	 * @param clazz
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	private HashMap<String, Class> extractMeta(Class clazz){
		Method[] methods = clazz.getDeclaredMethods();
		Set<String> attributes = new LinkedHashSet<String>();
		HashMap<String, Class> attributesDataTypes = new LinkedHashMap<String, Class>();
		for(Method method : methods){
			String methodName = method.getName();
			if(methodName.startsWith("get")){
				String attribute = CStringUtils.toVariableName(methodName.replace("get", ""));
				attributes.add(attribute);
				Class returnClass = method.getReturnType();
				attributesDataTypes.put(attribute, returnClass);
			}
		}
		return attributesDataTypes;
	}

}
