package com.ivanceras.gwt.reflection.generators;

import com.ivanceras.commons.conf.Configuration;
import com.ivanceras.commons.writer.FileUtil;
import com.ivanceras.commons.writer.SourceWriter;
import com.ivanceras.commons.writer.StringSourceWriter;
import com.ivanceras.gwt.reflection.exception.InstanceFactoryException;
import com.ivanceras.gwt.reflection.factory.BeanFactory;

public class BeanReflectionFactoryGenerator {

	public void start(Class<? extends Object>[] clazzes, Configuration conf){
		generate(clazzes, conf);
		for(Class<? extends Object> clazz : clazzes){
			new BeanReflectionGenerator().start(clazz, conf);
		}
	}

	void generate(Class<? extends Object>[] clazzes, Configuration conf){
		SourceWriter sw = new StringSourceWriter();
		String beanFactoryClassName = "BeanReflectionFactory";
		sw.println("package "+conf.metaDataPackageName+".generated;");
		sw.println();
		sw.lnprint("");
		sw.lnprint("/***");
		sw.lnprint("* This is automatically generated by "+getClass().getCanonicalName()+", based on the Class files");
		sw.lnprint("* ");
		sw.lnprint("* ");
		sw.lnprint("*/");
		for(Class<?> clazz : clazzes){
			sw.println("import "+clazz.getCanonicalName()+";");
		}
		sw.println("import "+conf.bopackageName+".reflection.*;");
		sw.println("import "+BeanFactory.class.getCanonicalName()+";");
		sw.println("import "+InstanceFactoryException.class.getCanonicalName()+";");
		sw.println();
		sw.println("public class "+beanFactoryClassName+" implements "+BeanFactory.class.getSimpleName()+"{");
		sw.println();
		sw.println("\tpublic Object getValue(Object instance_, String property_){");
		sw.println("\t\tClass<? extends Object> mClazz = instance_.getClass();");
		boolean doElse = false;
		for(Class<? extends Object> clazz : clazzes){
			String clazzName = clazz.getSimpleName();
			sw.print("\t\t");
			if(doElse){sw.print("else ");}else{doElse=true;}
			sw.println("if(mClazz.equals("+clazzName+".class)){");
			sw.println("\t\t\treturn "+clazzName+"Reflect.getValue(("+clazzName+") instance_, property_);");
			sw.println("\t\t}");
		}
		sw.println("\t\treturn null;");
		sw.println("\t}");
		sw.println();
		sw.println("\tpublic void setValue(Object instance_, String property_, Object value_){");
		sw.println("\t\tClass<? extends Object> mClazz = instance_.getClass();");
		boolean doElse2 = false;
		for(Class<? extends Object> clazz : clazzes){
			String clazzName = clazz.getSimpleName();
			sw.print("\t\t");
			if(doElse2){sw.print("else ");}else{doElse2=true;}
			sw.println("if(mClazz.equals("+clazzName+".class)){");
			sw.println("\t\t\t"+clazzName+"Reflect.setValue(("+clazzName+") instance_, property_, value_);");
			sw.println("\t\t}");
		}
		sw.println("\t}");
		sw.println("\t@SuppressWarnings(\"unchecked\")");
		sw.println("\t@Override");
		sw.println("\tpublic <T> T getInstance(Class<T> clazz) throws "+InstanceFactoryException.class.getSimpleName()+"{");
		boolean doElseInstance = false;
		for(Class<? extends Object> clazz : clazzes){
			String clazzName = clazz.getSimpleName();
			sw.print("\t\t");
			if(doElseInstance){sw.print("else ");}else{doElseInstance = true;}
			sw.println("if(clazz.equals("+clazzName+".class)){");
			sw.println("\t\t\treturn (T)new "+clazzName+"();");
			sw.println("\t\t}");
		}
		sw.println("\t\telse{");
		sw.println("\t\t\tthrow new "+InstanceFactoryException.class.getSimpleName()+"(\"No class for \"+clazz+\"]\");");
		sw.println("\t\t}");
		sw.println("\t}");
		//The array instances
		sw.println("\t@SuppressWarnings(\"unchecked\")");
		sw.println("\t@Override");
		sw.println("\tpublic <T> T[] getArrayInstance(Class<T> clazz, int n)  throws "+InstanceFactoryException.class.getSimpleName()+"{");
		boolean doElseArrayInstance = false;
		for(Class<? extends Object> clazz : clazzes){
			String clazzName = clazz.getSimpleName();
			sw.print("\t\t");
			if(doElseArrayInstance){sw.print("else ");}else{doElseArrayInstance = true;}
			sw.println("if(clazz.equals("+clazzName+".class)){");
			sw.println("\t\t\treturn (T[])new "+clazzName+"[n];");
			sw.println("\t\t}");
		}
		sw.println("\t\telse{");
		sw.println("\t\t\tthrow new "+InstanceFactoryException.class.getSimpleName()+"(\"No class for \"+clazz+\"]\");");
		sw.println("\t\t}");
		sw.println("\t}");

		//Get fields of Model
		sw.println("\t@Override");
		sw.println("\t@SuppressWarnings({ \"rawtypes\" })");
		sw.println("\tpublic String[] getModelFields(Class mClass)  throws "+InstanceFactoryException.class.getSimpleName()+"{");
		boolean doElseField = false;
		for(Class<? extends Object> clazz : clazzes){
			String clazzName = clazz.getSimpleName();
			sw.print("\t\t");
			if(doElseField){sw.print("else ");}else{doElseField = true;}
			sw.println("if(mClass.equals("+clazzName+".class)){");
			sw.println("\t\t\treturn "+clazzName+"Reflect.getModelFields();");
			sw.println("\t\t}");
		}
		sw.println("\t\telse{");
		sw.println("\t\t\tthrow new "+InstanceFactoryException.class.getSimpleName()+"(\"No class for \"+mClass+\"]\");");
		sw.println("\t\t}");
		sw.println("\t}");


		//Get dataType of Model fields
		sw.println("\t@Override");
		sw.println("\t@SuppressWarnings({ \"rawtypes\" })");
		sw.println("\tpublic Class<?>[] getFieldDataTypes(Class mClass)  throws "+InstanceFactoryException.class.getSimpleName()+"{");
		boolean doElseDataTypes = false;
		for(Class<? extends Object> clazz : clazzes){
			String clazzName = clazz.getSimpleName();
			sw.print("\t\t");
			if(doElseDataTypes){sw.print("else ");}else{doElseDataTypes = true;}
			sw.println("if(mClass.equals("+clazzName+".class)){");
			sw.println("\t\t\treturn "+clazzName+"Reflect.getFieldDataTypes();");
			sw.println("\t\t}");
		}
		sw.println("\t\telse{");
		sw.println("\t\t\tthrow new "+InstanceFactoryException.class.getSimpleName()+"(\"No class for \"+mClass+\"]\");");
		sw.println("\t\t}");
		sw.println("\t}");


		sw.println("}");
		FileUtil.writeToFile(sw.toString(), conf.metaDataDirectory+"/generated", beanFactoryClassName+".java");
	}

}
